// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package genpkg

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type KyberSockopsCryptoConfig struct {
	_                structs.HostLayout
	EnableEncryption uint8
	EnableDecryption uint8
	DebugMode        uint8
	Padding          [5]uint8
}

type KyberSockopsCryptoState struct {
	_                 structs.HostLayout
	KyberSharedSecret [32]uint8
	AesKey            [32]uint8
	EncryptCounter    [16]uint8
	DecryptCounter    [16]uint8
	PacketCounter     uint64
	Active            uint8
	Padding           [7]uint8
}

type KyberSockopsCryptoStats struct {
	_                 structs.HostLayout
	MessagesProcessed uint64
	MessagesEncrypted uint64
	MessagesDecrypted uint64
	EncryptionErrors  uint64
	ActiveConnections uint64
}

type KyberSockopsSockKey struct {
	_    structs.HostLayout
	Ip   uint32
	Port uint32
}

// LoadKyberSockops returns the embedded CollectionSpec for KyberSockops.
func LoadKyberSockops() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KyberSockopsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load KyberSockops: %w", err)
	}

	return spec, err
}

// LoadKyberSockopsObjects loads KyberSockops and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*KyberSockopsObjects
//	*KyberSockopsPrograms
//	*KyberSockopsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKyberSockopsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadKyberSockops()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// KyberSockopsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KyberSockopsSpecs struct {
	KyberSockopsProgramSpecs
	KyberSockopsMapSpecs
	KyberSockopsVariableSpecs
}

// KyberSockopsProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KyberSockopsProgramSpecs struct {
	SkMsgCrypto   *ebpf.ProgramSpec `ebpf:"sk_msg_crypto"`
	SockopsCrypto *ebpf.ProgramSpec `ebpf:"sockops_crypto"`
}

// KyberSockopsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KyberSockopsMapSpecs struct {
	ConfigMap      *ebpf.MapSpec `ebpf:"config_map"`
	CryptoStateMap *ebpf.MapSpec `ebpf:"crypto_state_map"`
	SockMap        *ebpf.MapSpec `ebpf:"sock_map"`
	StatsMap       *ebpf.MapSpec `ebpf:"stats_map"`
}

// KyberSockopsVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KyberSockopsVariableSpecs struct {
}

// KyberSockopsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKyberSockopsObjects or ebpf.CollectionSpec.LoadAndAssign.
type KyberSockopsObjects struct {
	KyberSockopsPrograms
	KyberSockopsMaps
	KyberSockopsVariables
}

func (o *KyberSockopsObjects) Close() error {
	return _KyberSockopsClose(
		&o.KyberSockopsPrograms,
		&o.KyberSockopsMaps,
	)
}

// KyberSockopsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKyberSockopsObjects or ebpf.CollectionSpec.LoadAndAssign.
type KyberSockopsMaps struct {
	ConfigMap      *ebpf.Map `ebpf:"config_map"`
	CryptoStateMap *ebpf.Map `ebpf:"crypto_state_map"`
	SockMap        *ebpf.Map `ebpf:"sock_map"`
	StatsMap       *ebpf.Map `ebpf:"stats_map"`
}

func (m *KyberSockopsMaps) Close() error {
	return _KyberSockopsClose(
		m.ConfigMap,
		m.CryptoStateMap,
		m.SockMap,
		m.StatsMap,
	)
}

// KyberSockopsVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadKyberSockopsObjects or ebpf.CollectionSpec.LoadAndAssign.
type KyberSockopsVariables struct {
}

// KyberSockopsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKyberSockopsObjects or ebpf.CollectionSpec.LoadAndAssign.
type KyberSockopsPrograms struct {
	SkMsgCrypto   *ebpf.Program `ebpf:"sk_msg_crypto"`
	SockopsCrypto *ebpf.Program `ebpf:"sockops_crypto"`
}

func (p *KyberSockopsPrograms) Close() error {
	return _KyberSockopsClose(
		p.SkMsgCrypto,
		p.SockopsCrypto,
	)
}

func _KyberSockopsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kybersockops_bpfeb.o
var _KyberSockopsBytes []byte
